import matplotlib.pyplot as plt  
import math
import numpy as np
import time
import random
from scipy import stats


 #for saving values generated by Box Muller Method create the following list
box_muller_arr = []
#for saving values generated by Marsaglia and Bray Method create the following list
mars_bray_arr = [] 
#time taken for generating 10000 values using Box Muller method
t1 = 0 
#time taken for generating 10000 values using Marsaglia and Bray method 
t2 = 0 

def func_Box_Muller(num):
    start_time = time.time()
    ans = []
    while len(ans)<num:
        u1 = np.random.random_sample()
        u2 = np.random.random_sample()
        r = -2*(math.log(u1))
        v = 2*(math.pi)*u2
        z1 = (math.sqrt(r))*(math.cos(v))
        z2 = (math.sqrt(r))*(math.cos(v))
        ans.append(z1)
        ans.append(z2)
    global t1
    t1 = (time.time() - start_time)
    print('Sample Mean:',np.mean(ans))
    print('Sample Variance:',np.var(ans))
    plt.xlabel('Values Generated')
    plt.ylabel('Frequency')
    if num==100:
        plt.hist(ans,bins = 10,color='red')
        plt.title('Plot for Box-Muller method for sample size 100')
    else: 
        plt.hist(ans,bins = 100,color='red')
        plt.title('Plot for Box-Muller method for sample size 10000')
    plt.show()
    if num == 10000:
        global box_muller_arr
        box_muller_arr = ans

def func_Marsaglia_Bray(num):
    start_time = time.time()
    ans = []
    while len(ans)<num:
        x = 2
        while x>1:
            u1 = np.random.random_sample()
            u2 = np.random.random_sample()
            u1 = 2*u1 - 1
            u2 = 2*u2 - 1
            x = u1*u1 + u2*u2
        y = math.sqrt((-2*(math.log(x)))/x)
        z1 = u1*y
        z2 = u2*y
        ans.append(z1)
        ans.append(z2)
    global t2
    t2 = (time.time() - start_time)
    print('Sample Mean:',np.mean(ans))
    print('Sample Variance:',np.var(ans))
    plt.xlabel('Values Generated')
    plt.ylabel('Frequency')
    if num==100:
        plt.hist(ans,bins = 10,color='red')
        plt.title('Plot for Marsaglia-Bray method for sample size 100')
    else: 
        plt.hist(ans,bins = 100,color='red')
        plt.title('Plot for Marsaglia-Bray method for sample size 10000')
    plt.show()
    if num == 10000:
        global mars_bray_arr
        mars_bray_arr = ans
        
def genNormal(mean,var):
    ans = []
    sigma = math.sqrt(var)
    for i in box_muller_arr:
        ans.append(mean+i*sigma)
    plt.hist(ans,density=True,bins=100,color='red')
    plt.title('Normal distribution generated by Box-Muller Method for a sample size of 10000 with mean:'+str(mean)+' and variance:'+str(var))
    domain = np.linspace(-10,15,1000)
    pdf = []
    for i in domain:
        pw = -0.5*((i-mean)/sigma)*((i-mean)/sigma)
        vl = (1/sigma)*(1/math.sqrt(2*math.pi))*(pow(math.e,pw))
        pdf.append(vl)
    plt.plot(domain,pdf,'r',color='black')
    plt.show()
    ans = []
    sigma = math.sqrt(var)
    for i in mars_bray_arr:
        ans.append(mean+i*sigma)
    plt.hist(ans,density=True,bins=100,color='red')
    plt.title('Normal distribution generated by Marsaglia-Bray Method for a sample size of 10000 with mean: '+str(mean)+' and variance:'+str(var))
    domain = np.linspace(-10,15,1000)
    pdf = []
    for i in domain:
        pw = -0.5*((i-mean)/sigma)*((i-mean)/sigma)
        vl = (1/sigma)*(1/math.sqrt(2*math.pi))*(pow(math.e,pw))
        pdf.append(vl)
    plt.plot(domain,pdf,'r',color='black')
    plt.show()
    
def rej_prop(num):
    cnt = 0
    cn = 0
    while cn<num:
        x = 2
        while x>1:
            u1 = np.random.random_sample()
            u2 = np.random.random_sample()
            u1 = 2*u1 - 1
            u2 = 2*u2 - 1
            x = u1*u1 + u2*u2
            cnt+=2
        y = math.sqrt((-2*(math.log(x)))/x)
        z1 = u1*y
        z2 = u2*y
        cn+=2
    return ((cnt-num)/(cnt)) 

func_Box_Muller(100)
func_Box_Muller(10000)
func_Marsaglia_Bray(100)
start_time = time.time()
func_Marsaglia_Bray(10000)
genNormal(0,5)
genNormal(5,5)

print('')
print('Time taken for Box-Muller method for sample size 10000 ',round(t1,6))
print('Time taken for Marsaglia-Bray method for sample size 10000 ',round(t2,6))

print('')
print('The proportion of values rejected while using Marsaglia and Bray Method:')

print('When 100 values were generated:',rej_prop(100))
print('When 10000 values were generated:',rej_prop(10000))
print('When 100000 values were generated:',rej_prop(100000))
print('When 1000000 values were generated:',rej_prop(1000000))